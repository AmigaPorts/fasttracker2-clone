#ifndef __FT2_SYSREQS_H
#define __FT2_SYSREQS_H

#include <stdint.h>
#include <SDL2/SDL.h>

enum /* SYSREQS */
{
    SR_ZAP,
    SR_TRANSP_DELETE_WARN,
    SR_CONFIG_RESET,
    SR_EXIT_SONG_MODIFIED,
    SR_EXIT,
    SR_SHRINK_PATT,
    SR_PASTEPATT_LEN,
    SR_INSTR_CLEAR,

    SR_NIB_RESTART,
    SR_NIB_QUIT,
    SR_NIB_NO_HELP,
    SR_NIB_NO_HIGHS,
    SR_NIB_PLAYER1_DIED,
    SR_NIB_PLAYER2_DIED,
    SR_NIB_BOTH_PLAYERS_DIED,
    SR_NIB_GAME_OVER,
    SR_NIB_STAGE_FINISHED,
    SR_NIB_P1_NAME,
    SR_NIB_P2_NAME,
    SR_NIB_CHEAT_ON,
    SR_NIB_CHEAT_OFF,
    SR_NIB_SURR_1PLAYER,

    SR_SAMP_CLEAR,
    SR_SAMP_CONV_8BIT,
    SR_SAMP_CONV_16BIT,
    SR_SAMP_MINIMIZE,
    SR_SAMP_LOAD_STEREO,
    SR_SAMP_VOLUME,
    SR_SAMP_RESAMPLE,
    SR_SAMP_MIX_SAMPLE,
    SR_SAMP_ECHO,
    SR_SAMP_SAVERANGE,

    SR_DISKOP_DELETE,
    SR_DISKOP_RENAME_DIR,
    SR_DISKOP_RENAME_FILE,
    SR_DISKOP_MAKEDIR,
    SR_DISKOP_SETPATH,
    SR_DISKOP_OVERWRITE,
    SR_WAV_OVERWRITE,
    SR_DISKOP_LOADMOD_DISCARD,
    SR_DROP_LOADMOD_DISCARD,
    SR_SCALE_FADE_VOL,
    SR_TRIM,
    SR_SAMPLING,

    /* ERROR/NOTICE/WARN MESSAGES (with OK button) */
    ERROR_MSGS_START,

    SR_SCALE_FADE_VOL_ERROR,
    SR_SAMP_MINIMIZE_NOT_NEEDED,
    SR_WAV_WRITE_ERROR,
    SR_AUDIO_MODE_ERROR,
    SR_CONFIGPATH_ERROR,
    SR_EMPTY_FILENAME,
    SR_ILLEGAL_FILENAME_DOT,
    SR_ILLEGAL_FILENAME,
    SR_FILE_DELETE_ERROR,
    SR_DIR_DELETE_ERROR,
    SR_FILE_RENAME_ERROR,
    SR_DIR_RENAME_ERROR,
    SR_MAKE_DIR_ERROR,
    SR_SET_PATH_ERROR,
    SR_LOAD_INCOMPAT_INSTR,
    SR_LOAD_WRONG_VERSION,
    SR_LOAD_INSTR0_ERROR,
    SR_OPEN_IO_ERROR,
    SR_SET_DRIVE_ERROR,
    SR_SETTING_NOT_APPLIED_YET,
    SR_FILTERING_NOT_APPLIED_YET,
    SR_CANT_CHANGE_SETTING_FULLSCREEN,
    SR_OVERFLOWN_PATT,
    SR_STERO_SAMPLES,
    SR_INSTR_STEREO_SAMPLES,
    SR_XM_OVER_128_INS,
    SR_S3M_LOADED,
    SR_SAVE_LINEAR_FREQ,
    SR_SAVE_WARN_SONGLEN,
    SR_SAVE_WARN_PATTS,
    SR_SAVE_WARN_INSTR,
    SR_SAVE_NOTE_UNDERFLOW,
    SR_SAVE_INCOMPAT_INSTR,
    SR_SAVE_INCOMPAT_EFX,
    SR_SAVE_ERR_PATTLEN,
    SR_NO_RANGE,
    SR_SET_LAGER_RANGE,
    SR_UNSUPPORTED_XM_VER,
    SR_UNSUPPORTED_CHS,
    SR_UNSUPPORTED_PATTS,
    SR_OOM_ERROR,
    SR_EXPAND_PATT_ERROR,
    SR_CONFIG_CANT_LOAD,
    SR_CONFIG_CANT_SAVE,
    SR_CONFIG_NOT_VALID,
    SR_LOAD_IO_ERROR,
    SR_SAVE_IO_ERROR,
    SR_LOAD_WAV_SONG_ERROR,
    SR_LOAD_MOD_ERROR,
    SR_LOAD_MOD_ERROR2,
    SR_LOAD_MOD_OOM,
    SR_SAMP_SR_ERROR,
    SR_XFADE_ERROR_1,
    SR_XFADE_ERROR_2,
    SR_XFADE_ERROR_3,
    SR_XFADE_ERROR_4,
    SR_CUT_TO_BUF_OOM,
    SR_SAMP_LOAD_ERROR,
    SR_SAMP_LOAD_AIFC_ERROR,
    SR_SAMP_SAVE_EMPTY,
    SR_INST_SAVE_EMPTY,
    SR_EMPTY_PASTE_ERROR,
    SR_NO_PATT_MARK,
    SR_SAMPLING_NOT_SUPPORTED,
    SR_SAMPLING_AUDIO_DEV_ERROR,
    SR_AUD_OUT_DEV_ERROR,
    SR_THREAD_ERROR,
    SR_HELP_SUBJECT_NOT_FOUND,
    SR_HELP_RENDER_ERROR,
    SR_CURR_PATT_EMPTY,
    SR_INSTR_HAS_NO_SMPS,

    SR_NOT_IMPLEMENTED,
    NUM_SYSREQS
};

enum
{
    SYSREQ_REQUEST      =  0,
    SYSREQ_MESSAGE      =  1,
    SYSREQ_NIBBLES      =  2,
    SYSREQ_NIBBLES1     =  3,
    SYSREQ_NIBBLES2     =  4,
    SYSREQ_NIBBLES3     =  5,
    SYSREQ_RENAMEFILE   =  6,
    SYSREQ_RENAMEDIR    =  7,
    SYSREQ_MAKEDIR      =  8,
    SYSREQ_SETPATH      =  9,
    SYSREQ_SCALEFADEVOL = 10,
    SYSREQ_SAMPLEVOLUME = 11,
    SYSREQ_SAVERANGE    = 12,
};

#define SYSTEM_REQUEST_H 67
#define SYSTEM_REQUEST_Y 249

typedef struct sysReq_t /* DO NOT TOUCH!!! */
{
    uint16_t w;
    char *text;
    uint16_t buttonIDs[8];
    uint8_t numButtons, type;
} sysReq_t;

typedef struct sysReqKeys_t /* DO NOT TOUCH!!! */
{
    uint8_t numKeys;
    SDL_Keycode keys[4];
    void (*callbackFunc1)(void);
    void (*callbackFunc2)(void);
    void (*callbackFunc3)(void);
    void (*callbackFunc4)(void);
    void (*callbackFuncEnter)(void);
    void (*callbackFuncEsc)(void);
} sysReqKeys_t;

void drawSystemRequest(void); /* render */
void sysReqQueue(uint16_t sysReqID);
void hideSystemRequest(void);
void checkSysReqKeys(SDL_Keycode keycode);

#endif
